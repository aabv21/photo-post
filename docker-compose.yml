services:
  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: services/gateway/Dockerfile.gateway
    container_name: photo-post-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - GATEWAY_SECRET=gateway-secret-key
      - REDIS_HOST=redis-gateway
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - auth
      - users
      - posts
      - likes
      - redis-gateway
      - kafka
    networks:
      - photo-post-network
    restart: unless-stopped

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: services/auth/Dockerfile.auth
    container_name: photo-post-auth
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - SQLITE_PATH=/data/auth.db
      - REDIS_HOST=redis-auth
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
      - GATEWAY_SECRET=gateway-secret-key
    volumes:
      - sqlite-auth-data:/data
    depends_on:
      - redis-auth
      - kafka
    networks:
      - photo-post-network
    restart: unless-stopped

  # Users Service
  users:
    build:
      context: .
      dockerfile: services/users/Dockerfile.users
    container_name: photo-post-users
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - SQLITE_PATH=/data/users.db
      - REDIS_HOST=redis-users
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
      - GATEWAY_SECRET=gateway-secret-key
    volumes:
      - sqlite-users-data:/data
    depends_on:
      - redis-users
      - kafka
    networks:
      - photo-post-network
    restart: unless-stopped

  # Posts Service
  posts:
    build:
      context: .
      dockerfile: services/posts/Dockerfile.posts
    container_name: photo-post-posts
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - SQLITE_PATH=/data/posts.db
      - REDIS_HOST=redis-posts
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
      - GATEWAY_SECRET=gateway-secret-key
    volumes:
      - sqlite-posts-data:/data
      - photo-uploads:/app/uploads
    depends_on:
      - redis-posts
      - kafka
    networks:
      - photo-post-network
    restart: unless-stopped

  # Likes Service
  likes:
    build:
      context: .
      dockerfile: services/likes/Dockerfile.likes
    container_name: photo-post-likes
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - SQLITE_PATH=/data/likes.db
      - REDIS_HOST=redis-likes
      - REDIS_PORT=6379
      - KAFKA_BROKER=kafka:9092
      - GATEWAY_SECRET=gateway-secret-key
    volumes:
      - sqlite-likes-data:/data
    depends_on:
      - redis-likes
      - kafka
    networks:
      - photo-post-network
    restart: unless-stopped

  # Redis instances
  redis-gateway:
    image: redis:alpine
    container_name: photo-post-redis-gateway
    volumes:
      - redis-gateway-data:/data
    ports:
      - "6379:6379"
    networks:
      - photo-post-network
    restart: unless-stopped

  redis-auth:
    image: redis:alpine
    container_name: photo-post-redis-auth
    volumes:
      - redis-auth-data:/data
    ports:
      - "6380:6379"
    networks:
      - photo-post-network
    restart: unless-stopped

  redis-users:
    image: redis:alpine
    container_name: photo-post-redis-users
    volumes:
      - redis-users-data:/data
    ports:
      - "6381:6379"
    networks:
      - photo-post-network
    restart: unless-stopped

  redis-posts:
    image: redis:alpine
    container_name: photo-post-redis-posts
    volumes:
      - redis-posts-data:/data
    ports:
      - "6382:6379"
    networks:
      - photo-post-network
    restart: unless-stopped

  redis-likes:
    image: redis:alpine
    container_name: photo-post-redis-likes
    volumes:
      - redis-likes-data:/data
    ports:
      - "6383:6379"
    networks:
      - photo-post-network
    restart: unless-stopped

  # Kafka and Zookeeper services
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: photo-post-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - photo-post-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: photo-post-kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Add this to allow topic deletion
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      # Add this to force a clean start
      KAFKA_LOG_DIRS: /tmp/kafka-logs
    # Use tmpfs for Kafka data to ensure clean start
    tmpfs:
      - /tmp/kafka-logs
    networks:
      - photo-post-network
    restart: unless-stopped

networks:
  photo-post-network:
    driver: bridge

volumes:
  # SQLite data volumes
  sqlite-auth-data:
    driver: local
  sqlite-users-data:
    driver: local
  sqlite-posts-data:
    driver: local
  sqlite-likes-data:
    driver: local

  # Redis data volumes
  redis-gateway-data:
    driver: local
  redis-auth-data:
    driver: local
  redis-users-data:
    driver: local
  redis-posts-data:
    driver: local
  redis-likes-data:
    driver: local

  # Single Kafka data volume
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local

  # Photo uploads volume
  photo-uploads:
    driver: local
